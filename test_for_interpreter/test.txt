result := 1;

a := 1 + 2;
b := 1 - 2;
c := 6 * 2;
d := 6 / 2;
e := 7 / 2;
f := 5 * 5 / 2 ; # 12
g := 5 / 2 * 5 ; # 10
if a = 3 and b = -1 and c = 12 and d = 3 and e = 3 and f = 12 and g = 10 then
    skip
else
    result := result - 1
end;

# while 関数　のテスト
def mult(x, y,){
    result := 0;
    while 0 < y do
        result := result + x;
        y := y - 1
    end

    return result
};

a := mult(a, a,);

if a = 9 then
    skip
else
    result := result - 1
end;

# 再帰関数のテスト

def fact (x,){
    
    if x = 0 then
        res := 1
    else
        res := x * fact(x - 1,)
    end

    return res
};

a := fact(6,);

if a = 720 then
    skip
else
    result := result - 1
end;

# high order function のテスト

def hofun (f, x, y,){
    skip
    return f(x, y,)
};

def add (x, y,){
    skip
    return x + y
};

a := hofun(add, 1, 2,);

if a = 3 then
    skip
else
    result := result - 1
end;

#　相互再帰を高階関数で実現するテスト　外のスコープが見えないので引数で渡す

def even (x,odd,){

    res := 0;
    if x = 0 then
        res := 1
    else
        res := odd(x - 1,even,)
    end

    return res
};

def odd (x,even,){

    res := 0;
    if x = 0 then
        res := 0
    else
        res := even(x - 1,odd,)
    end

    return res
};

a := even(10,odd,);
b := odd(10,even,);
c := even(11,odd,);
d := odd(11,even,);

if a=1 and b=0 and c=0 and d=1 then
    skip
else
    result := result - 1
end;





# 足し算、かけざん、べき乗を一般化した関数を定義する　ハイパー演算

def hyper (a, b, n,){
    res := 0;
    if n = 1 then
        res := a + b
    else 
        res := a;
        i := 0;
        while i < b - 1 do
            res := hyper(a, res, n - 1,);
            i := i + 1
        end
    end

    return res
};



a := hyper(2, 3, 1,); # 2 + 3 = 5
b := hyper(2, 3, 2,); # 2 * 3 = 6
c := hyper(2, 3, 3,); # 2 ^ 3 = 8
d := hyper(2, 3, 4,); # 2 ^ 2 ^ 2 = 16 ちなみにhyper(2, 4, 4,) は終わらなかった




if a = 5 and b = 6 and c = 8 and d = 16 then
    skip
else
    result := result - 1
end;





# これが1ならすべてのテストが通ったことになる

print result
